import Foundation

public extension ResourceState {

    /// Returns cells according to the `state` and the given `valueToItems` closure.
    /// If no values are currently available, return nil in valueToItems to
    /// show an item generated by `noResultsItemGenerator`/`errorItemGenerator`/`loadingCellGenerator`
    /// instead.
    func idiomaticListViewState<BaseItemModelType: ItemModel, SectionModelType: SectionModel>(
        valueToIdiomaticListViewStateTransformer: ValueToListViewStateTransformer
        <Value, IdiomaticItemModel<BaseItemModelType>, SectionModelType>,
        loadingSection:
            @escaping (ResourceState)
                -> SectionAndItems<IdiomaticItemModel<BaseItemModelType>, SectionModelType>,
        errorSection:
            @escaping (E)
                -> SectionAndItems<IdiomaticItemModel<BaseItemModelType>, SectionModelType>,
        noResultsSection:
            @escaping (ResourceState)
                -> SectionAndItems<IdiomaticItemModel<BaseItemModelType>, SectionModelType>
    ) -> ListViewState<IdiomaticItemModel<BaseItemModelType>, SectionModelType>
        where BaseItemModelType.E == E {

        func boxedValueToSections(_ box: EquatableBox<Value>?)
            -> [SectionAndItems<IdiomaticItemModel<BaseItemModelType>, SectionModelType>]? {

            return (box?.value).flatMap { value
                -> [SectionAndItems<IdiomaticItemModel<BaseItemModelType>, SectionModelType>]? in

                return valueToIdiomaticListViewStateTransformer.valueToListViewState(value).sectionsWithItems
            }
        }

        func noResultsOrErrorSection()
            -> ListViewState<IdiomaticItemModel<BaseItemModelType>, SectionModelType> {

            if let error = self.error {
                return ListViewState.readyToDisplay([errorSection(error)])
            } else {
                return ListViewState.readyToDisplay([noResultsSection(self)])
            }
        }

        func numberOfItems(
            _ sections: [SectionAndItems<IdiomaticItemModel<BaseItemModelType>, SectionModelType>]
        ) -> Int {
            return sections.map({ $0.items.count }).reduce(0, +)
        }

        switch provisioningState {
        case .notReady:
            return ListViewState<IdiomaticItemModel<BaseItemModelType>, SectionModelType>.notReady
        case .loading:
            if let sections = boxedValueToSections(value), numberOfItems(sections) > 0 {
                // Loading and there are cached items, return them
                return ListViewState.readyToDisplay(sections)
            } else if let error = self.error {
                // Loading, error, and there are empty cached items, return error item
                return ListViewState.readyToDisplay([errorSection(error)])
            } else if value != nil {
                // Loading and there are empty cached items, return error or noResults item
                return noResultsOrErrorSection()
            } else {
                // Loading and there is no cached value, return loading item
                return ListViewState.readyToDisplay([loadingSection(self)])
            }
        case .result:
            if let value = self.value {
                if let sections = boxedValueToSections(value), numberOfItems(sections) > 0 {
                    // Success, return items
                    return ListViewState.readyToDisplay(sections)
                } else {
                    // Success without items, return error or noResults item
                    return noResultsOrErrorSection()
                }
            } else {
                // Error and no cached items, return error item (or noResults item as fallback)
                return noResultsOrErrorSection()
            }
        }
    }

    /// Convenience
    func idiomaticListViewState<BaseItemModelType, SectionModelType: SectionModel>(
        valueToIdiomaticListViewStateTransformer: ValueToListViewStateTransformer
        <Value, IdiomaticItemModel<BaseItemModelType>, SectionModelType>,
        noResultsText: String
        ) -> ListViewState<IdiomaticItemModel<BaseItemModelType>, SectionModelType>
        where BaseItemModelType.E == E {

        return idiomaticListViewState(
            valueToIdiomaticListViewStateTransformer: valueToIdiomaticListViewStateTransformer,
            loadingSection: { _ in SectionAndItems(SectionModelType(), [IdiomaticItemModel.loading]) },
            errorSection: { SectionAndItems(SectionModelType(), [IdiomaticItemModel.error($0)]) },
            noResultsSection: { _ in
                SectionAndItems(SectionModelType(), [IdiomaticItemModel.noResults(noResultsText)])
            }
        )
    }

}
