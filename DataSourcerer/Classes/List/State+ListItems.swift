import Foundation

public extension State {

    /// Returns cells according to the `state` and the given `valueToItems` closure.
    /// If no values are currently available, return nil in valueToItems to
    /// show an item generated by `noResultsItemGenerator`/`errorItemGenerator`/`loadingCellGenerator`
    /// instead.
    func idiomaticListViewState<BaseItem: ListItem, Section: ListSection>(
        valueToIdiomaticListViewStateTransformer: ValueToListViewStateTransformer
        <Value, IdiomaticListItem<BaseItem>, Section>,
        loadingSection: @escaping ((State) -> SectionWithItems<IdiomaticListItem<BaseItem>, Section>),
        errorSection: @escaping ((E) -> SectionWithItems<IdiomaticListItem<BaseItem>, Section>),
        noResultsSection: @escaping ((State) -> SectionWithItems<IdiomaticListItem<BaseItem>, Section>)
    ) -> ListViewState<IdiomaticListItem<BaseItem>, Section> where BaseItem.E == E {

        func boxedValueToSections(_ box: EquatableBox<Value>?)
            -> [SectionWithItems<IdiomaticListItem<BaseItem>, Section>]? {

            return (box?.value).flatMap { value
                -> [SectionWithItems<IdiomaticListItem<BaseItem>, Section>]? in

                return valueToIdiomaticListViewStateTransformer.valueToListViewState(value).sectionsWithItems
            }
        }

        func noResultsOrErrorSection() -> ListViewState<IdiomaticListItem<BaseItem>, Section> {
            if let error = self.error {
                return ListViewState.readyToDisplay([errorSection(error)])
            } else {
                return ListViewState.readyToDisplay([noResultsSection(self)])
            }
        }

        func numberOfItems(
            _ sections: [SectionWithItems<IdiomaticListItem<BaseItem>, Section>]
        ) -> Int {
            return sections.map({ $0.items.count }).reduce(0, +)
        }

        switch provisioningState {
        case .notReady:
            return ListViewState<IdiomaticListItem<BaseItem>, Section>.notReady
        case .loading:
            if let sections = boxedValueToSections(value), numberOfItems(sections) > 0 {
                // Loading and there are cached items, return them
                return ListViewState.readyToDisplay(sections)
            } else if let error = self.error {
                // Loading, error, and there are empty cached items, return error item
                return ListViewState.readyToDisplay([errorSection(error)])
            } else if value != nil {
                // Loading and there are empty cached items, return error or noResults item
                return noResultsOrErrorSection()
            } else {
                // Loading and there is no cached value, return loading item
                return ListViewState.readyToDisplay([loadingSection(self)])
            }
        case .result:
            if let value = self.value {
                if let sections = boxedValueToSections(value), numberOfItems(sections) > 0 {
                    // Success, return items
                    return ListViewState.readyToDisplay(sections)
                } else {
                    // Success without items, return error or noResults item
                    return noResultsOrErrorSection()
                }
            } else {
                // Error and no cached items, return error item (or noResults item as fallback)
                return noResultsOrErrorSection()
            }
        }
    }

    /// Convenience
    func idiomaticListViewState<BaseItem, Section: ListSection>(
        valueToIdiomaticListViewStateTransformer: ValueToListViewStateTransformer
        <Value, IdiomaticListItem<BaseItem>, Section>,
        noResultsText: String
        ) -> ListViewState<IdiomaticListItem<BaseItem>, Section>
        where BaseItem.E == E {

        return idiomaticListViewState(
            valueToIdiomaticListViewStateTransformer: valueToIdiomaticListViewStateTransformer,
            loadingSection: { _ in SectionWithItems(Section(), [IdiomaticListItem.loading]) },
            errorSection: { SectionWithItems(Section(), [IdiomaticListItem.error($0)]) },
            noResultsSection: { _ in
                SectionWithItems(Section(), [IdiomaticListItem.noResults(noResultsText)])
            }
        )
    }

    /// Returns cells according to the `state` and the given `valueToItems` closure.
    /// If no values are currently available, return nil in valueToItems to
    /// show an item generated by `noResultsItemGenerator`/`errorItemGenerator`/`loadingCellGenerator`
    /// instead.
    func idiomaticSingleSectionListViewState<BaseItem: ListItem>(
        valueToItems: @escaping (Value) -> [IdiomaticListItem<BaseItem>]?,
        loadingItem: @escaping ((State) -> IdiomaticListItem<BaseItem>),
        errorItem: @escaping ((E) -> IdiomaticListItem<BaseItem>),
        noResultsItem: @escaping ((State) -> IdiomaticListItem<BaseItem>)
        ) -> SingleSectionListViewState<IdiomaticListItem<BaseItem>>
        where BaseItem.E == E {

        func boxedValueToItems(_ box: EquatableBox<Value>?)
            -> [IdiomaticListItem<BaseItem>]? {
            return (box?.value).flatMap({ valueToItems($0) })
        }

        func noResultsOrErrorItem() -> SingleSectionListViewState<IdiomaticListItem<BaseItem>> {
            if let error = self.error {
                return .readyToDisplay([errorItem(error)])
            } else {
                return .readyToDisplay([noResultsItem(self)])
            }
        }

        switch provisioningState {
        case .notReady:
            return .notReady
        case .loading:
            if let items = boxedValueToItems(value), items.isEmpty == false {
                // Loading and there are cached items, return them
                return .readyToDisplay(items)
            } else if let error = self.error {
                // Loading, error, and there are empty cached items, return error item
                return .readyToDisplay([errorItem(error)])
            } else if value != nil {
                // Loading and there are empty cached items, return error or noResults item
                return noResultsOrErrorItem()
            } else {
                // Loading and there is no cached value, return loading item
                return .readyToDisplay([loadingItem(self)])
            }
        case .result:
            if let value = self.value {
                if let cells = boxedValueToItems(value), cells.isEmpty == false {
                    // Success, return items
                    return .readyToDisplay(cells)
                } else {
                    // Success without items, return error or noResults item
                    return noResultsOrErrorItem()
                }
            } else {
                // Error and no cached items, return error item (or noResults item as fallback)
                return noResultsOrErrorItem()
            }
        }
    }

    /// Convenience
    func idiomaticSingleSectionListViewState<BaseItem: ListItem>(
        valueToBaseItems: @escaping (Value) -> [BaseItem]?,
        noResultsText: String
        ) -> SingleSectionListViewState<IdiomaticListItem<BaseItem>>
    where BaseItem.E == E {

        return idiomaticSingleSectionListViewState(
            valueToItems: { value in
                return valueToBaseItems(value)?.map {
                    IdiomaticListItem<BaseItem>.baseItem($0)
                }
            },
            loadingItem: { _ in IdiomaticListItem.loading },
            errorItem: { IdiomaticListItem.error($0) },
            noResultsItem: { _ -> IdiomaticListItem<BaseItem> in
                IdiomaticListItem<BaseItem>.noResults(noResultsText)
            }
        )
    }
}
